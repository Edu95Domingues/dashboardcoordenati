import streamlit as st
import pandas as pd

# T√≠tulo geral
st.set_page_config(page_title="Dashboard Coordenati Tatu√≠", layout="wide")
st.title("üìä Dashboard de An√∫ncios - Coordenati Tatu√≠")

# Fun√ß√£o para carregar e filtrar dados
def carregar_dados(caminho, tipo_metrica):
    df = pd.read_csv(caminho)
    df["Data de in√≠cio"] = pd.to_datetime(df["Data de in√≠cio"], errors="coerce")
    df["Data de t√©rmino"] = pd.to_datetime(df["Data de t√©rmino"], errors="coerce")
    
    if tipo_metrica == "thruplay":
        df = df[df["Indicador de resultados"] == "Visualiza√ß√µes de v√≠deo com reprodu√ß√£o de 15 segundos"]
    elif tipo_metrica == "conversas":
        df = df[df["Indicador de resultados"] == "Conversas iniciadas"]
    
    df["CTR (link)"] = df["Cliques no link"] / df["Impress√µes"]
    
    return df

# Abas: capta√ß√£o e convers√£o
aba = st.tabs(["üì£ Campanha de Capta√ß√£o", "üí¨ Campanha de Convers√£o"])

# ------------------------ CAPTA√á√ÉO ------------------------
with aba[0]:
    st.header("üì£ Capta√ß√£o - Engajamento e Thruplay")

    # Upload ou leitura local
    df_capt1 = carregar_dados("CA---Coordenati-Tatu√≠-An√∫ncios-20-de-mar-de-2025-7-de-a-r-de-2025.csv", "thruplay")
    df_capt2 = carregar_dados("CA---Coordenati-Tatu√≠-An√∫ncios-8-de-a-r-de-2025-20-de-a-r-de-2025 - Capta√ß√£o.csv", "thruplay")
    df_cap = pd.concat([df_capt1, df_capt2], ignore_index=True)

    st.subheader("üéØ Filtros")
    with st.expander("Filtrar dados"):
        campanhas = st.multiselect("Campanhas", options=df_cap["Nome da campanha"].unique(), default=None)
        ativos = st.multiselect("Status de veicula√ß√£o", options=df_cap["Veicula√ß√£o"].unique(), default=None)
        data_inicio, data_fim = st.date_input("Per√≠odo", [df_cap["Data de in√≠cio"].min(), df_cap["Data de t√©rmino"].max()])

    if campanhas:
        df_cap = df_cap[df_cap["Nome da campanha"].isin(campanhas)]
    if ativos:
        df_cap = df_cap[df_cap["Veicula√ß√£o"].isin(ativos)]
    df_cap = df_cap[(df_cap["Data de in√≠cio"] >= pd.to_datetime(data_inicio)) & (df_cap["Data de t√©rmino"] <= pd.to_datetime(data_fim))]

    st.dataframe(df_cap[[
        "Nome do an√∫ncio", "Veicula√ß√£o", "Impress√µes", "Alcance", 
        "Cliques (todos)", "Cliques no link", "CTR (link)", 
        "Resultados", "Custo por resultados", "Valor gasto (BRL)"
    ]].sort_values("Resultados", ascending=False), use_container_width=True)

# ------------------------ CONVERS√ÉO ------------------------
with aba[1]:
    st.header("üí¨ Convers√£o - Mensagens no WhatsApp")

    df_conj = carregar_dados("CA---Coordenati-Tatu√≠-Conjuntos-de-an√∫ncios-8-de-a-r-de-2025-20-de-a-r-de-2025 Conj Convers√£o.csv", "conversas")
    df_cria = carregar_dados("CA---Coordenati-Tatu√≠-An√∫ncios-8-de-a-r-de-2025-20-de-a-r-de-2025 Criat Convers√£o.csv", "conversas")
    df_conv = pd.concat([df_conj, df_cria], ignore_index=True)

    st.subheader("üéØ Filtros")
    with st.expander("Filtrar dados"):
        campanhas = st.multiselect("Campanhas", options=df_conv["Nome da campanha"].unique(), default=None)
        ativos = st.multiselect("Status de veicula√ß√£o", options=df_conv["Veicula√ß√£o"].unique(), default=None)
        data_inicio, data_fim = st.date_input("Per√≠odo", [df_conv["Data de in√≠cio"].min(), df_conv["Data de t√©rmino"].max()])

    if campanhas:
        df_conv = df_conv[df_conv["Nome da campanha"].isin(campanhas)]
    if ativos:
        df_conv = df_conv[df_conv["Veicula√ß√£o"].isin(ativos)]
    df_conv = df_conv[(df_conv["Data de in√≠cio"] >= pd.to_datetime(data_inicio)) & (df_conv["Data de t√©rmino"] <= pd.to_datetime(data_fim))]

    st.dataframe(df_conv[[
        "Nome do an√∫ncio", "Veicula√ß√£o", "Impress√µes", "Alcance", 
        "Cliques (todos)", "Cliques no link", "CTR (link)", 
        "Resultados", "Custo por resultados", "Valor gasto (BRL)"
    ]].sort_values("Resultados", ascending=False), use_container_width=True)
